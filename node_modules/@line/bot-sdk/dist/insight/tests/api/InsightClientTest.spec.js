"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../api");
const msw_1 = require("msw");
const node_1 = require("msw/node");
const assert_1 = require("assert");
const pkg = require("../../../../package.json");
const channel_access_token = "test_channel_access_token";
describe("InsightClient", () => {
    const server = (0, node_1.setupServer)();
    before(() => {
        server.listen();
    });
    after(() => {
        server.close();
    });
    afterEach(() => {
        server.resetHandlers();
    });
    const client = new api_1.InsightClient({
        channelAccessToken: channel_access_token,
    });
    it("getFriendsDemographics", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/insight/demographic";
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getFriendsDemographics();
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getMessageEvent", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/insight/message/event".replace("{requestId}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getMessageEvent(
        // requestId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getNumberOfFollowers", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/insight/followers".replace("{date}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getNumberOfFollowers(
        // date: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getNumberOfMessageDeliveries", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/insight/message/delivery".replace("{date}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getNumberOfMessageDeliveries(
        // date: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getStatisticsPerUnit", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/insight/message/event/aggregation"
            .replace("{customAggregationUnit}", "DUMMY") // string
            .replace("{from}", "DUMMY") // string
            .replace("{to}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getStatisticsPerUnit(
        // customAggregationUnit: string
        "DUMMY", // paramName=customAggregationUnit(enum)
        // from: string
        "DUMMY", // paramName=from(enum)
        // to: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
});
