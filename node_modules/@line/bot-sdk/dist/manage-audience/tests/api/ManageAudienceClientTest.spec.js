"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../api");
const msw_1 = require("msw");
const node_1 = require("msw/node");
const assert_1 = require("assert");
const pkg = require("../../../../package.json");
const channel_access_token = "test_channel_access_token";
describe("ManageAudienceClient", () => {
    const server = (0, node_1.setupServer)();
    before(() => {
        server.listen();
    });
    after(() => {
        server.close();
    });
    afterEach(() => {
        server.resetHandlers();
    });
    const client = new api_1.ManageAudienceClient({
        channelAccessToken: channel_access_token,
    });
    it("activateAudienceGroup", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/audienceGroup/{audienceGroupId}/activate".replace("{audienceGroupId}", "0"); // number
        server.use(msw_1.http.put(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.activateAudienceGroup(
        // audienceGroupId: number
        0);
        (0, assert_1.equal)(requestCount, 1);
    });
    it("addAudienceToAudienceGroup", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/audienceGroup/upload";
        server.use(msw_1.http.put(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.addAudienceToAudienceGroup(
        // addAudienceToAudienceGroupRequest: AddAudienceToAudienceGroupRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("createAudienceGroup", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/audienceGroup/upload";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.createAudienceGroup(
        // createAudienceGroupRequest: CreateAudienceGroupRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("createClickBasedAudienceGroup", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/audienceGroup/click";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.createClickBasedAudienceGroup(
        // createClickBasedAudienceGroupRequest: CreateClickBasedAudienceGroupRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("createImpBasedAudienceGroup", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/audienceGroup/imp";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.createImpBasedAudienceGroup(
        // createImpBasedAudienceGroupRequest: CreateImpBasedAudienceGroupRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("deleteAudienceGroup", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/audienceGroup/{audienceGroupId}".replace("{audienceGroupId}", "0"); // number
        server.use(msw_1.http.delete(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.deleteAudienceGroup(
        // audienceGroupId: number
        0);
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getAudienceData", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/audienceGroup/{audienceGroupId}".replace("{audienceGroupId}", "0"); // number
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getAudienceData(
        // audienceGroupId: number
        0);
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getAudienceGroupAuthorityLevel", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/audienceGroup/authorityLevel";
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getAudienceGroupAuthorityLevel();
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getAudienceGroups", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/audienceGroup/list"
            .replace("{page}", "0") // number
            .replace("{description}", "DUMMY") // string
            .replace("{size}", "0"); // number
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getAudienceGroups(
        // page: number
        "DUMMY", // paramName=page(enum)
        // description: string
        "DUMMY", // paramName=description(enum)
        // status: AudienceGroupStatus
        "DUMMY", // paramName=status(enum)
        // size: number
        "DUMMY", // paramName=size(enum)
        // includesExternalPublicGroups: boolean
        "DUMMY", // paramName=includesExternalPublicGroups(enum)
        // createRoute: AudienceGroupCreateRoute
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("updateAudienceGroupAuthorityLevel", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/audienceGroup/authorityLevel";
        server.use(msw_1.http.put(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.updateAudienceGroupAuthorityLevel(
        // updateAudienceGroupAuthorityLevelRequest: UpdateAudienceGroupAuthorityLevelRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("updateAudienceGroupDescription", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/audienceGroup/{audienceGroupId}/updateDescription".replace("{audienceGroupId}", "0"); // number
        server.use(msw_1.http.put(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.updateAudienceGroupDescription(
        // audienceGroupId: number
        0, // paramName=audienceGroupId(number or int or long)
        // updateAudienceGroupDescriptionRequest: UpdateAudienceGroupDescriptionRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
});
