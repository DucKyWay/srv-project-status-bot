"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../api");
const msw_1 = require("msw");
const node_1 = require("msw/node");
const assert_1 = require("assert");
const pkg = require("../../../../package.json");
const channel_access_token = "test_channel_access_token";
describe("MessagingApiClient", () => {
    const server = (0, node_1.setupServer)();
    before(() => {
        server.listen();
    });
    after(() => {
        server.close();
    });
    afterEach(() => {
        server.resetHandlers();
    });
    const client = new api_1.MessagingApiClient({
        channelAccessToken: channel_access_token,
    });
    it("audienceMatch", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/bot/ad/multicast/phone";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.audienceMatch(
        // audienceMatchMessagesRequest: AudienceMatchMessagesRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("broadcast", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/broadcast".replace("{xLineRetryKey}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.broadcast(
        // broadcastRequest: BroadcastRequest
        {}, // paramName=broadcastRequest
        // xLineRetryKey: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("cancelDefaultRichMenu", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/user/all/richmenu";
        server.use(msw_1.http.delete(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.cancelDefaultRichMenu();
        (0, assert_1.equal)(requestCount, 1);
    });
    it("createRichMenu", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.createRichMenu(
        // richMenuRequest: RichMenuRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("createRichMenuAlias", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/alias";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.createRichMenuAlias(
        // createRichMenuAliasRequest: CreateRichMenuAliasRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("deleteRichMenu", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/{richMenuId}".replace("{richMenuId}", "DUMMY"); // string
        server.use(msw_1.http.delete(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.deleteRichMenu(
        // richMenuId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("deleteRichMenuAlias", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/alias/{richMenuAliasId}".replace("{richMenuAliasId}", "DUMMY"); // string
        server.use(msw_1.http.delete(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.deleteRichMenuAlias(
        // richMenuAliasId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getAdPhoneMessageStatistics", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/delivery/ad_phone".replace("{date}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getAdPhoneMessageStatistics(
        // date: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getAggregationUnitNameList", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/aggregation/list"
            .replace("{limit}", "DUMMY") // string
            .replace("{start}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getAggregationUnitNameList(
        // limit: string
        "DUMMY", // paramName=limit(enum)
        // start: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getAggregationUnitUsage", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/aggregation/info";
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getAggregationUnitUsage();
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getBotInfo", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/info";
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getBotInfo();
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getDefaultRichMenuId", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/user/all/richmenu";
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getDefaultRichMenuId();
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getFollowers", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/followers/ids"
            .replace("{start}", "DUMMY") // string
            .replace("{limit}", "0"); // number
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getFollowers(
        // start: string
        "DUMMY", // paramName=start(enum)
        // limit: number
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getGroupMemberCount", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/group/{groupId}/members/count".replace("{groupId}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getGroupMemberCount(
        // groupId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getGroupMemberProfile", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/group/{groupId}/member/{userId}"
            .replace("{groupId}", "DUMMY") // string
            .replace("{userId}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getGroupMemberProfile(
        // groupId: string
        "DUMMY", // groupId(string)
        // userId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getGroupMembersIds", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/group/{groupId}/members/ids"
            .replace("{groupId}", "DUMMY") // string
            .replace("{start}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getGroupMembersIds(
        // groupId: string
        "DUMMY", // groupId(string)
        // start: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getGroupSummary", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/group/{groupId}/summary".replace("{groupId}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getGroupSummary(
        // groupId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getMessageQuota", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/quota";
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getMessageQuota();
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getMessageQuotaConsumption", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/quota/consumption";
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getMessageQuotaConsumption();
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getNarrowcastProgress", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/progress/narrowcast".replace("{requestId}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getNarrowcastProgress(
        // requestId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getNumberOfSentBroadcastMessages", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/delivery/broadcast".replace("{date}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getNumberOfSentBroadcastMessages(
        // date: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getNumberOfSentMulticastMessages", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/delivery/multicast".replace("{date}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getNumberOfSentMulticastMessages(
        // date: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getNumberOfSentPushMessages", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/delivery/push".replace("{date}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getNumberOfSentPushMessages(
        // date: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getNumberOfSentReplyMessages", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/delivery/reply".replace("{date}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getNumberOfSentReplyMessages(
        // date: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getPNPMessageStatistics", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/delivery/pnp".replace("{date}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getPNPMessageStatistics(
        // date: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getProfile", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/profile/{userId}".replace("{userId}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getProfile(
        // userId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getRichMenu", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/{richMenuId}".replace("{richMenuId}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getRichMenu(
        // richMenuId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getRichMenuAlias", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/alias/{richMenuAliasId}".replace("{richMenuAliasId}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getRichMenuAlias(
        // richMenuAliasId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getRichMenuAliasList", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/alias/list";
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getRichMenuAliasList();
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getRichMenuBatchProgress", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/progress/batch".replace("{requestId}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getRichMenuBatchProgress(
        // requestId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getRichMenuIdOfUser", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/user/{userId}/richmenu".replace("{userId}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getRichMenuIdOfUser(
        // userId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getRichMenuList", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/list";
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getRichMenuList();
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getRoomMemberCount", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/room/{roomId}/members/count".replace("{roomId}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getRoomMemberCount(
        // roomId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getRoomMemberProfile", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/room/{roomId}/member/{userId}"
            .replace("{roomId}", "DUMMY") // string
            .replace("{userId}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getRoomMemberProfile(
        // roomId: string
        "DUMMY", // roomId(string)
        // userId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getRoomMembersIds", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/room/{roomId}/members/ids"
            .replace("{roomId}", "DUMMY") // string
            .replace("{start}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getRoomMembersIds(
        // roomId: string
        "DUMMY", // roomId(string)
        // start: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getWebhookEndpoint", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/channel/webhook/endpoint";
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getWebhookEndpoint();
        (0, assert_1.equal)(requestCount, 1);
    });
    it("issueLinkToken", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/user/{userId}/linkToken".replace("{userId}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.issueLinkToken(
        // userId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("leaveGroup", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/group/{groupId}/leave".replace("{groupId}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.leaveGroup(
        // groupId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("leaveRoom", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/room/{roomId}/leave".replace("{roomId}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.leaveRoom(
        // roomId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("linkRichMenuIdToUser", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/user/{userId}/richmenu/{richMenuId}"
            .replace("{userId}", "DUMMY") // string
            .replace("{richMenuId}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.linkRichMenuIdToUser(
        // userId: string
        "DUMMY", // userId(string)
        // richMenuId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("linkRichMenuIdToUsers", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/bulk/link";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.linkRichMenuIdToUsers(
        // richMenuBulkLinkRequest: RichMenuBulkLinkRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("markMessagesAsRead", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/markAsRead";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.markMessagesAsRead(
        // markMessagesAsReadRequest: MarkMessagesAsReadRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("multicast", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/multicast".replace("{xLineRetryKey}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.multicast(
        // multicastRequest: MulticastRequest
        {}, // paramName=multicastRequest
        // xLineRetryKey: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("narrowcast", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/narrowcast".replace("{xLineRetryKey}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.narrowcast(
        // narrowcastRequest: NarrowcastRequest
        {}, // paramName=narrowcastRequest
        // xLineRetryKey: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("pushMessage", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/push".replace("{xLineRetryKey}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.pushMessage(
        // pushMessageRequest: PushMessageRequest
        {}, // paramName=pushMessageRequest
        // xLineRetryKey: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("pushMessagesByPhone", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/bot/pnp/push".replace("{xLineDeliveryTag}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.pushMessagesByPhone(
        // pnpMessagesRequest: PnpMessagesRequest
        {}, // paramName=pnpMessagesRequest
        // xLineDeliveryTag: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("replyMessage", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/reply";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.replyMessage(
        // replyMessageRequest: ReplyMessageRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("richMenuBatch", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/batch";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.richMenuBatch(
        // richMenuBatchRequest: RichMenuBatchRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("setDefaultRichMenu", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/user/all/richmenu/{richMenuId}".replace("{richMenuId}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.setDefaultRichMenu(
        // richMenuId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("setWebhookEndpoint", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/channel/webhook/endpoint";
        server.use(msw_1.http.put(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.setWebhookEndpoint(
        // setWebhookEndpointRequest: SetWebhookEndpointRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("testWebhookEndpoint", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/channel/webhook/test";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.testWebhookEndpoint(
        // testWebhookEndpointRequest: TestWebhookEndpointRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("unlinkRichMenuIdFromUser", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/user/{userId}/richmenu".replace("{userId}", "DUMMY"); // string
        server.use(msw_1.http.delete(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.unlinkRichMenuIdFromUser(
        // userId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("unlinkRichMenuIdFromUsers", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/bulk/unlink";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.unlinkRichMenuIdFromUsers(
        // richMenuBulkUnlinkRequest: RichMenuBulkUnlinkRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("updateRichMenuAlias", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/alias/{richMenuAliasId}".replace("{richMenuAliasId}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.updateRichMenuAlias(
        // richMenuAliasId: string
        "DUMMY", // richMenuAliasId(string)
        // updateRichMenuAliasRequest: UpdateRichMenuAliasRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("validateBroadcast", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/validate/broadcast";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.validateBroadcast(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("validateMulticast", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/validate/multicast";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.validateMulticast(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("validateNarrowcast", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/validate/narrowcast";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.validateNarrowcast(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("validatePush", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/validate/push";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.validatePush(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("validateReply", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/message/validate/reply";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.validateReply(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("validateRichMenuBatchRequest", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/validate/batch";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.validateRichMenuBatchRequest(
        // richMenuBatchRequest: RichMenuBatchRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("validateRichMenuObject", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/bot/richmenu/validate";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.validateRichMenuObject(
        // richMenuRequest: RichMenuRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
});
