"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../api");
const msw_1 = require("msw");
const node_1 = require("msw/node");
const assert_1 = require("assert");
const pkg = require("../../../../package.json");
const channel_access_token = "test_channel_access_token";
describe("LiffClient", () => {
    const server = (0, node_1.setupServer)();
    before(() => {
        server.listen();
    });
    after(() => {
        server.close();
    });
    afterEach(() => {
        server.resetHandlers();
    });
    const client = new api_1.LiffClient({
        channelAccessToken: channel_access_token,
    });
    it("addLIFFApp", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/liff/v1/apps";
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.addLIFFApp(
        // addLiffAppRequest: AddLiffAppRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
    it("deleteLIFFApp", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/liff/v1/apps/{liffId}".replace("{liffId}", "DUMMY"); // string
        server.use(msw_1.http.delete(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.deleteLIFFApp(
        // liffId: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("getAllLIFFApps", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/liff/v1/apps";
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getAllLIFFApps();
        (0, assert_1.equal)(requestCount, 1);
    });
    it("updateLIFFApp", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/liff/v1/apps/{liffId}".replace("{liffId}", "DUMMY"); // string
        server.use(msw_1.http.put(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("Authorization"), `Bearer ${channel_access_token}`);
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.updateLIFFApp(
        // liffId: string
        "DUMMY", // liffId(string)
        // updateLiffAppRequest: UpdateLiffAppRequest
        {});
        (0, assert_1.equal)(requestCount, 1);
    });
});
