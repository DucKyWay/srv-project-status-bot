"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../api");
const msw_1 = require("msw");
const node_1 = require("msw/node");
const assert_1 = require("assert");
const pkg = require("../../../../package.json");
const channel_access_token = "test_channel_access_token";
describe("ChannelAccessTokenClient", () => {
    const server = (0, node_1.setupServer)();
    before(() => {
        server.listen();
    });
    after(() => {
        server.close();
    });
    afterEach(() => {
        server.resetHandlers();
    });
    const client = new api_1.ChannelAccessTokenClient({});
    it("getsAllValidChannelAccessTokenKeyIds", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/oauth2/v2.1/tokens/kid"
            .replace("{clientAssertionType}", "DUMMY") // string
            .replace("{clientAssertion}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.getsAllValidChannelAccessTokenKeyIds(
        // clientAssertionType: string
        "DUMMY", // paramName=clientAssertionType(enum)
        // clientAssertion: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("issueChannelToken", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/oauth/accessToken"
            .replace("{grantType}", "DUMMY") // string
            .replace("{clientId}", "DUMMY") // string
            .replace("{clientSecret}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.issueChannelToken(
        // grantType: string
        "DUMMY", // grantType(string)
        // clientId: string
        "DUMMY", // clientId(string)
        // clientSecret: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("issueChannelTokenByJWT", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/oauth2/v2.1/token"
            .replace("{grantType}", "DUMMY") // string
            .replace("{clientAssertionType}", "DUMMY") // string
            .replace("{clientAssertion}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.issueChannelTokenByJWT(
        // grantType: string
        "DUMMY", // grantType(string)
        // clientAssertionType: string
        "DUMMY", // clientAssertionType(string)
        // clientAssertion: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("issueStatelessChannelToken", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/oauth2/v3/token"
            .replace("{grantType}", "DUMMY") // string
            .replace("{clientAssertionType}", "DUMMY") // string
            .replace("{clientAssertion}", "DUMMY") // string
            .replace("{clientId}", "DUMMY") // string
            .replace("{clientSecret}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.issueStatelessChannelToken(
        // grantType: string
        "DUMMY", // paramName=grantType(enum)
        // clientAssertionType: string
        "DUMMY", // paramName=clientAssertionType(enum)
        // clientAssertion: string
        "DUMMY", // clientAssertion(string)
        // clientId: string
        "DUMMY", // clientId(string)
        // clientSecret: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("revokeChannelToken", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/oauth/revoke".replace("{accessToken}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.revokeChannelToken(
        // accessToken: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("revokeChannelTokenByJWT", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/oauth2/v2.1/revoke"
            .replace("{clientId}", "DUMMY") // string
            .replace("{clientSecret}", "DUMMY") // string
            .replace("{accessToken}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.revokeChannelTokenByJWT(
        // clientId: string
        "DUMMY", // clientId(string)
        // clientSecret: string
        "DUMMY", // clientSecret(string)
        // accessToken: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("verifyChannelToken", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/v2/oauth/verify".replace("{accessToken}", "DUMMY"); // string
        server.use(msw_1.http.post(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.verifyChannelToken(
        // accessToken: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
    it("verifyChannelTokenByJWT", async () => {
        let requestCount = 0;
        const endpoint = "https://api.line.me/oauth2/v2.1/verify".replace("{accessToken}", "DUMMY"); // string
        server.use(msw_1.http.get(endpoint, ({ request, params, cookies }) => {
            requestCount++;
            (0, assert_1.equal)(request.headers.get("User-Agent"), `${pkg.name}/${pkg.version}`);
            return msw_1.HttpResponse.json({});
        }));
        const res = await client.verifyChannelTokenByJWT(
        // accessToken: string
        "DUMMY");
        (0, assert_1.equal)(requestCount, 1);
    });
});
